<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAC4AAABcAAAAXwAAAGAJEh81ID5rGwEBA1YAAABgAAAAXwAAAF8AAABfAAAAXwAA
        AF8AAABfAAAAXwAAAF8AAABfAAAAXwAAAF8AAABfAAAAXwAAAF8AAABfAAAAXwAAAF8AAABfAAAAXwAA
        AF8AAABfAAAAXwAAAFwAAAAuBAgO3BguUP8cNl7/HDVc/y1Xluc7ccLXHzxn+xw2XP8cNl3/HDZd/xw2
        Xf8cNl3/HDZd/xw2Xf8cNl3/HDZd/xw2Xf8cNl3/HDZd/xw2Xf8cNl3/HDZd/xw2Xf8cNl3/HDZd/xw2
        Xf8cNl3/HDZd/xw2Xf8aM1r/ECRE/wMGDNwECA3ZFyxM/hs0Wv8bNFn/GzRZ/xs0Wf8bNFn/GzRZ/xs0
        Wf8bM1n/GzRZ/xs0Wf8bNFn/GzRZ/xs0Wf8bM1n/GzRZ/hs0Wf4bNFn+GzRZ/hs0Wf4bNFn+GjNY/xky
        V/8aM1j/GzNY/hs1WvobNVr6GzRa/BkxVv4PI0H+AwYL2QAAACkAAABqDAoH60M3JP9KPSj/Sj0o/0o9
        KP9JPCj/Rzsm/xwXD/8wJxr/Sz4p/0o9KP9JPSj/SDwn/yIdEv8AAAChAAAAVwAAAFoAAABaAAAAVwAA
        AI8UEAr9KCAU/xENB/8DAgD8AAAA0QAAAJYAAABsAAAAWgAAAFYAAAAqAAAAAAAAAB0YFA/fe2pM/4p3
        Vf+JdlT/iXZU/4h1U/95Z0j/LSYa/1lNN/+LeFX/iXZU/4h1VP98akr/Ny4g/wAAAG4AAAAAAAAAAAAA
        AAADAgIAAAAAgUM6Kf94Zkj/Z1c9/1FFL/82LiD9HhkR7gsKB8sBAQCAAAAACwAAAAAAAAAAAAAAHRYT
        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
        AH+AAAB/gAAAf4AcAP+AHwD////w//////8=
</value>
  </data>
</root>